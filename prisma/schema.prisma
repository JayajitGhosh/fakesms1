// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String
  firstName String
  lastName  String
  gender    String?
  phone     String?
  address   String?
  dateOfBirth DateTime?
  profileImage String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student specific fields
  studentId     String?   @unique
  grade         Int?
  section       String?
  parentName    String?
  parentPhone   String?
  emergencyContact String?

  // Teacher specific fields
  teacherId     String?   @unique
  department    String?
  qualification String?
  hireDate      DateTime?

  // Relations
  studentClasses    StudentClass[]
  teacherClasses    Class[]         @relation("TeacherClasses")
  gradesGiven       Grade[]   @relation("GradesGiven")
  gradesReceived    Grade[]   @relation("GradesReceived")
  attendanceGiven   Attendance[]   @relation("AttendanceGiven")
  attendanceReceived Attendance[]  @relation("AttendanceReceived")
  announcements     Announcement[]

  @@map("users")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  grade       Int
  section     String
  academicYear String
  teacherId   String
  teacher     User     @relation("TeacherClasses", fields: [teacherId], references: [id])
  students    StudentClass[]
  subjects    Subject[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([grade, section, academicYear])
  @@map("classes")
}

model StudentClass {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  student   User     @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([studentId, classId])
  @@map("student_classes")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  grades      Grade[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subjects")
}

model Grade {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  teacherId String
  grade     Float
  maxGrade  Float    @default(100)
  type      String   // exam, quiz, assignment, etc.
  date      DateTime
  comments  String?
  student   User     @relation("GradesReceived", fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   User     @relation("GradesGiven", fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grades")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  teacherId String
  date      DateTime
  status    String   // present, absent, late
  remarks   String?
  student   User     @relation("AttendanceReceived", fields: [studentId], references: [id])
  teacher   User     @relation("AttendanceGiven", fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date])
  @@map("attendance")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isPublic    Boolean  @default(true)
  targetClass String?  // specific class or all
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)
  source    String?  // blog, landing, etc
}
